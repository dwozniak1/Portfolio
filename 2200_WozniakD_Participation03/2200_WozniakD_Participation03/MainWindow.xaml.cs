//Name: Delaney Wozniak
//Class:INFO 2200
//Section: X01
//Professor: Sharp
//Date: 2/19/2024
//Project #: Participation 3
//By submitting this assignment, I declare that the source code contained in this assignment was written solely by me, unless specifically provided in the assignment. 
//I attest that no part of this assignment, in whole or in part, was generated by Generative Artificial Intelligence (e.g., ChatGPT, Bard, Copilot, etc.) nor obtained from a paid solution service (e.g., Chegg, Course Hero, Bartleby, etc.). 
//I understand that copying any source code, in whole or in part, constitutes cheating, and that I will receive a zero on this project if I am found in violation of this policy.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace _2200_WozniakD_Participation03
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        Dictionary<string, Plant> plantDictionary = new Dictionary<string, Plant>(); // created dictionary in Plant class to store plant name as the key
        public MainWindow()
        {
            InitializeComponent();
            LoadValues(); // loads values into comboxes
        }
        /// <summary>
        /// created method LoadValues to show items when user selects combobox
        /// </summary>
        private void LoadValues()
        {
            // items to be loaded into CbEnvironment
            CbEnvironment.Items.Add("Forest");
            CbEnvironment.Items.Add("Desert");
            CbEnvironment.Items.Add("Tropical");

            //items to be loaded into CbType
            CbType.Items.Add("Flower");
            CbType.Items.Add("Tree");
            CbType.Items.Add("Shrub");
        }

        /// <summary>
        /// created method to validate user input
        /// </summary>
        /// <returns></returns>
        public bool ValidateInput()
        {
            string errorMessage = "";
            if (TxtBoxName.Text == "") errorMessage += "Please enter a name for the plant.\n\n"; // checks if user input has been entered
            if (CbEnvironment.SelectedIndex == -1) errorMessage += "Please select an environment.\n\n"; // checks if user selected environment
            if (CbType.SelectedIndex == -1) errorMessage += "Please select a plant type.\n\n"; // checks if user selected type

            if (errorMessage == "") 
            {
                return true; // if user input is correct display input
            }
            else
            {
                MessageBox.Show(errorMessage, "Invalid Input"); // display error message is user input is incorrect
                return false;
            }
        }
        /// <summary>
        /// method to display the correct picture based on the combo box selection for enviornment
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>

        private void CbEnvironment_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // switch case to display the correct picture based on the combo box selection for Environment
            switch (CbEnvironment.SelectedItem)
            {
                case "Forest":
                    ImgPlant.Source = new BitmapImage(new Uri("/images/forest.png", UriKind.Relative)); // displays forest picture if Forest is selected
                    break;
                case "Desert":
                    ImgPlant.Source = new BitmapImage(new Uri("/images/desert.png", UriKind.Relative)); // displays desert picture if Desert is selected
                    break;
                case "Tropical":
                    ImgPlant.Source = new BitmapImage(new Uri("/images/tropical.jpg", UriKind.Relative)); // displays tropical picture if Tropical is selected
                    break;
                default:
                    break;
            }

        }
        /// <summary>
        /// method to display the correct picture based on the combo box selection for Type
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void CbType_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // switch case to display an image based on the selest of the Type combo box
            switch (CbType.SelectedItem)
            {
                case "Tree":
                    ImgPlant.Source = new BitmapImage(new Uri("/images/tree.jpg", UriKind.Relative)); // displays tree picture if Tree is selected
                    break;
                case "Flower":
                    ImgPlant.Source = new BitmapImage(new Uri("/images/rose.png", UriKind.Relative)); // displays rose picture if Flower is selected
                    break;
                case "Shrub":
                    ImgPlant.Source = new BitmapImage(new Uri("/images/shrub.png", UriKind.Relative)); // displays shrub picture if Shrub is selected
                    break;
                default:
                    break;
            }
        }
        /// <summary>
        /// Click event to add plant
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnAddPlant_Click(object sender, RoutedEventArgs e)
        {
            if (ValidateInput()) // if user input is valid, create plant
            {
                Plant plant = null;
                // switch case to create a new plant based on the selection from the type combo box
                switch (CbType.SelectedItem) 
                {
                    // creates a new plant that is either a tree, flower, or shrub depending on user selection
                    case "Tree":
                        plant = new Tree(CbEnvironment.SelectedItem.ToString(),CbType.SelectedItem.ToString(),TxtBoxName.Text); // created new plant that is a tree if user selected
                        break;
                    case "Flower":
                        plant = new Flower(CbEnvironment.SelectedItem.ToString(), CbType.SelectedItem.ToString(), TxtBoxName.Text); // created new plant that is a flower if user selected
                        break;
                    case "Shrub":
                        plant = new Shrub(CbEnvironment.SelectedItem.ToString(), CbType.SelectedItem.ToString(), TxtBoxName.Text); // created new plant that is a shrub if user selected
                        break;
                    default:
                        MessageBox.Show("I have no idea how we got here."); // error message
                        break;
                }
                if (plant != null)
                {
                    plantDictionary.Add(plant.Name, plant); // add plant name to dictionary
                    LstBoxPlants.Items.Add(plant.Name); // add to listbox
                }
            }
        }
        /// <summary>
        /// click event to show plant details
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void BtnShowDetails_Click(object sender, RoutedEventArgs e)
        {
            if (LstBoxPlants.SelectedIndex > -1)
            {
                if (plantDictionary.TryGetValue(LstBoxPlants.SelectedItem.ToString(), out Plant slPlant)) // if key is provided and found in the dictionary, the out parameter will store it
                {
                    PlantDetailsWindow pdw = new PlantDetailsWindow(); // create new plants details window
                    pdw.LblNameResults.Content = slPlant.Name; // load name results
                    pdw.LblEnvResults.Content = slPlant.Enviornment; // load environment results
                    pdw.LblTypResults.Content = slPlant.Type; // load type results
                    pdw.SelectedPlant = slPlant;
                }
                else
                {
                    MessageBox.Show("Could not find that plant in the database."); // error message if key is not found
                }
            }
        }
    }
}
